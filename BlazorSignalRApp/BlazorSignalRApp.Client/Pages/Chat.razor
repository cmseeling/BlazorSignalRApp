@page "/chat"
@page "/chat/{RoomName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat @(string.IsNullOrEmpty(RoomName) ? "" : $"- {RoomName}")</PageTitle>

<div class="form-group">
    <label>
        Room:
        <input @bind="roomInput" />
    </label>
    <button @onclick="JoinRoom" disabled="@(!IsConnected)">Join Room</button>
</div>
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string? RoomName { get; set; }

    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;
    private string? roomInput;
    private string? currentRoom;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        // Set up connection state monitoring
        hubConnection.Reconnecting += error =>
        {
            messages.Add("Connection lost. Attempting to reconnect...");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += connectionId =>
        {
            messages.Add("Connection reestablished.");
            if (!string.IsNullOrEmpty(currentRoom))
            {
                _ = JoinRoom(); // Rejoin the room after reconnection
            }
            return Task.CompletedTask;
        };

        await hubConnection.StartAsync();

        // If RoomName is provided in the URL, join that room
        if (!string.IsNullOrEmpty(RoomName))
        {
            currentRoom = RoomName;
            roomInput = RoomName;
            // We need to wait a moment to ensure the connection is established
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await JoinRoom();
            }
            else
            {
                hubConnection.Closed += async (error) =>
                {
                    await Task.Delay(new Random().Next(0, 5) * 1000);
                    await hubConnection.StartAsync();
                };
                
                // Add a handler for when connection is established
                hubConnection.On("Connected", async () => 
                {
                    if (!string.IsNullOrEmpty(roomInput))
                    {
                        await JoinRoom();
                    }
                });
            }
        }
    }

    private async Task JoinRoom()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(roomInput) && hubConnection.State == HubConnectionState.Connected)
        {
            // Leave current room if any
            if (!string.IsNullOrEmpty(currentRoom))
            {
                await hubConnection.SendAsync("LeaveRoom", currentRoom);
                messages.Add($"You left room: {currentRoom}");
            }

            // Join new room
            await hubConnection.SendAsync("JoinRoom", roomInput);
            currentRoom = roomInput;
            messages.Add($"You joined room: {currentRoom}");
            
            // Update URL without reloading the page
            if (currentRoom != RoomName)
            {
                Navigation.NavigateTo($"/chat/{currentRoom}", false);
            }
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(currentRoom))
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, currentRoom);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
