@page "/chat/{RoomName}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chat @(string.IsNullOrEmpty(RoomName) ? "" : $"- {RoomName}")</PageTitle>

<div class="form-group">
    <label>
        Username:
        <input @bind="userName" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string? RoomName { get; set; }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userName;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        // Set up connection state monitoring
        hubConnection.Reconnecting += error =>
        {
            messages.Add("Connection lost. Attempting to reconnect...");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += connectionId =>
        {
            messages.Add("Connection reestablished.");
            if (!string.IsNullOrEmpty(RoomName))
            {
                _ = JoinRoom(RoomName); // Rejoin the room after reconnection
            }
            return Task.CompletedTask;
        };

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        
        // Load username from local storage after connection is established
        // This avoids JavaScript interop during server-side rendering
        if (hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                userName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "chatUserName");
            }
            catch
            {
                // Ignore errors during JS interop
            }
        }

        // If RoomName is provided in the URL, join that room
        if (!string.IsNullOrEmpty(RoomName))
        {
            // We need to wait a moment to ensure the connection is established
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await JoinRoom(RoomName);
            }
            else
            {
                hubConnection.Closed += async (error) =>
                {
                    // wait 5 seconds before trying to reconnect
                    await Task.Delay(5000);
                    await hubConnection.StartAsync();
                };
                
                // Add a handler for when connection is established
                hubConnection.On("Connected", async () => 
                {
                    if (!string.IsNullOrEmpty(RoomName))
                    {
                        await JoinRoom(RoomName);
                    }
                });
            }
        }
    }

    private async Task JoinRoom(string room)
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            // Leave current room if any
            // if (!string.IsNullOrEmpty(currentRoom))
            // {
            //     await hubConnection.SendAsync("LeaveRoom", currentRoom);
            //     messages.Add($"You left room: {currentRoom}");
            // }

            // Save username to local storage
            // if (!string.IsNullOrEmpty(userName))
            // {
            //     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "chatUserName", userName);
            // }

            // Join new room
            await hubConnection.SendAsync("JoinRoom", RoomName, userName ?? "Anonymous");
            messages.Add($"You joined room: {RoomName}");
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(RoomName))
        {
            await hubConnection.SendAsync("SendMessage", userName ?? "Anonymous", messageInput, RoomName);
            messageInput = string.Empty; // Clear message input after sending
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
